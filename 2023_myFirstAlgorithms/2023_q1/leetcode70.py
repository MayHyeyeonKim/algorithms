class Solution:
    def climbStairs(self, n: int) -> int:
        if n == 1:
            return 1
        elif n == 2:
            return 2
        else:
            prev1, prev2 = 1,2
            for i in range(3, n+1):
                current = prev1 + prev2
                prev1 = prev2
                prev2 = current
            return current

# 문제: n개의 계단을 오를 때, 1계단 혹은 2계단씩 올라갈 수 있을 때, 전체 n개의 계단을 오르는 방법의 수를 구하세요.
# 예를 들어, n이 2일 경우에는 2개의 계단을 오를 때 가능한 방법이 두 가지밖에 없습니다: [1, 1], [2]. n이 3일 경우에는 가능한 방법이 3가지입니다: [1, 1, 1], [1, 2], [2, 1].
# 이 문제는 대표적인 DP(Dynamic Programming) 문제입니다. 
# n번째 계단을 오르는 방법의 수를 구하려면, n-1번째 계단과 n-2번째 계단을 오르는 방법의 수를 알아야 합니다. 
# 그래서 n-1번째와 n-2번째를 모두 알고 있으면 n번째를 구할 수 있고, 그렇게 되면 n+1번째, n+2번째를 구할 수 있습니다. 이런 방식으로 계단을 올라가는 방법의 수를 구하는 것입니다.

# 예를 들어, 3개의 계단을 오르는 방법을 구한다면, 다음과 같이 진행됩니다.
# 1번째 계단을 오르는 방법은 1가지입니다: [1].
# 2번째 계단을 오르는 방법은 2가지입니다: [1, 1], [2].
# 3번째 계단을 오르는 방법은 3가지입니다: [1, 1, 1], [1, 2], [2, 1].
# 따라서, 3개의 계단을 오르는 방법의 수는 3입니다.

# 이 문제의 시간복잡도는 O(n)이고, 공간복잡도는 O(1)입니다.